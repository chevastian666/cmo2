name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint || (echo "Linting failed" && exit 1)
    
    - name: Run type checking
      run: npx tsc --noEmit || (echo "Type checking failed" && exit 1)
    
    - name: Run unit tests
      run: |
        echo "Running unit tests..."
        echo "Current directory: $(pwd)"
        echo "Test files found:"
        find src -name "*.test.*" -o -name "*.spec.*" | head -20
        npm run test:unit || (echo "Unit tests failed with exit code $?" && exit 1)
    
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        npm run test:integration || echo "No integration tests found or some failed"
      continue-on-error: true
    
    - name: Generate coverage report
      run: |
        echo "Generating coverage report..."
        npm run test:coverage || echo "Coverage generation failed"
        echo "Coverage files:"
        find . -name "coverage-final.json" -o -name "coverage" -type d | head -10
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results/

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    
    - name: Run E2E tests
      run: npm run test:e2e || echo "E2E tests not configured or failed"
      env:
        CI: true
    
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
    
    - name: Upload Playwright Videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-videos
        path: test-results/
        retention-days: 7

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build || (echo "Build failed" && exit 1)
    
    - name: Check build size
      run: |
        echo "Build size report:"
        du -sh dist/
        find dist -name "*.js" -o -name "*.css" | xargs ls -lh || echo "No build artifacts found"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-dist
        path: dist/

  lighthouse:
    name: Lighthouse Performance Test
    runs-on: ubuntu-latest
    needs: [build]
    if: success()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-dist
        path: dist/
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v12
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
      continue-on-error: true